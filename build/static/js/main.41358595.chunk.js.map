{"version":3,"sources":["infobox.js","_util.js","Map.js","table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["infobox","title","isRed","isGreen","isGrey","isBlue","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","isloading","casesTypeColors","hex","multiplier","recovered","deaths","vaccinated","sortData","data","sort","a","b","showDataOnMap","countries","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","finalData","setFinalData","covidLGData","setCovidLGData","vaccineLGData","setVaccineLGData","lineGraphData","setLineGraphData","getCovidLGData","fetch","then","response","json","getVaccineLGData","useEffect","LGData","getLGData","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","vaccinationInfo","setVaccinationInfo","tableData","setTableData","mapCountries","setMapCountries","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","isLoading","setLoading","mapDataCountries","setMapDataCountries","mapDataCountriesVaccination","setMapDataCountriesVaccination","getCountriesData","getCountriesVaccinationData","getMapCountries","name","iso2","sortedData","mapData","i","j","dataForMap","timeline","onCountryChange","event","console","log","countryCode","target","vaccineUrl","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","daily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41358595.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./infobox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction infobox({ title, isRed, isGreen,isGrey, isBlue, cases, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infobox ${active && \"infobox--selected\"} ${isRed && \"infobox__cases--red\"} \r\n      ${isGreen && \"infobox__cases--green\"} \r\n      ${isGrey && \"infobox__cases--grey\"} ${isBlue && \"infobox__cases--blue\"} `}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infobox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2\r\n          className={`infobox__cases ${isRed && \"infobox__cases--red\"} \r\n          ${isGreen && \"infobox__cases--green\"} \r\n          ${isGrey && \"infobox__cases--grey\"} ${isBlue && \"infobox__cases--blue\"} `}\r\n        >\r\n          {props.isloading ? <i className=\"fa fa-cog fa-spin fa-fw\" /> : cases}\r\n        </h2>\r\n        <Typography className=\"infobox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default infobox;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    multiplier: 400,\r\n  },\r\n  deaths: {\r\n    hex: \"grey\",\r\n    multiplier: 800,\r\n  },\r\n  vaccinated:{\r\n    hex:\"#0000ff\",\r\n    multiplier:50,\r\n  }\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (countries, casesType) =>\r\n  countries.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-vaccinated\">\r\n            Vaccinated: {numeral(country.vaccinated).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from './_util';\r\n\r\nfunction map({casesType, countries, center, zoom}) {\r\n    function ChangeView({center,zoom}){\r\n        const map =useMap();\r\n        map.setView(center,zoom);\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <MapContainer\r\n            casesType={casesType}\r\n            className=\"map\"\r\n            center={center}\r\n            zoom={zoom}\r\n            scrollWheelZoom={false}\r\n        >\r\n            <ChangeView center={center} zoom={zoom} />\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"        \r\n            />\r\n            {showDataOnMap(countries, casesType)}\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default map;\r\n","import React from 'react';\r\nimport './table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"000,000\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [finalData, setFinalData] = useState({});\r\n  const [covidLGData, setCovidLGData] = useState({});\r\n  const [vaccineLGData, setVaccineLGData] = useState({});\r\n  const [lineGraphData, setLineGraphData] = useState();\r\n\r\n  const getLGData = () => {\r\n    if (covidLGData && vaccineLGData) {\r\n      let LGData = {\r\n        cases: covidLGData.cases,\r\n        deaths: covidLGData.deaths,\r\n        recovered: covidLGData.recovered,\r\n        vaccinated: vaccineLGData,\r\n      };\r\n\r\n      setLineGraphData(LGData);\r\n    }\r\n  };\r\n\r\n  const buildChartData = (lineGraphData, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    {\r\n      for (let date in lineGraphData.cases) {\r\n        if (lastDataPoint) {\r\n          let newDataPoint = {\r\n            x: date,\r\n            y: lineGraphData[casesType][date] - lastDataPoint,\r\n          };\r\n          chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = lineGraphData[casesType][date];\r\n      }\r\n      return chartData;\r\n    }\r\n  };\r\n\r\n  const getCovidLGData = async()=>{\r\n    await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //console.log(data);\r\n        setCovidLGData(data);\r\n      });\r\n  }\r\n\r\n  const getVaccineLGData = async()=>{\r\n    await fetch(\r\n      \"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=120&fullData=false\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //console.log(data);\r\n        setVaccineLGData(data);\r\n      });\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getCovidLGData();\r\n    getVaccineLGData();\r\n    getLGData();\r\n    if (lineGraphData) {\r\n      const chartData = buildChartData(lineGraphData, casesType);\r\n      setFinalData(chartData);\r\n    }\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {finalData?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: finalData,\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import {\n  MenuItem,\n  Select,\n  FormControl,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport Infobox from \"./infobox\";\nimport Map from \"./Map\";\nimport Table from \"./table\";\nimport { sortData, prettyPrintStat } from \"./_util\";\nimport \"./App.css\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./infobox.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [vaccinationInfo, setVaccinationInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [isLoading, setLoading] = useState(false);\n  const [mapDataCountries, setMapDataCountries] = useState([]);\n  const [mapDataCountriesVaccination, setMapDataCountriesVaccination] =\n    useState([]);\n\n  //initial data display\n  useEffect(async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n\n    await fetch(\n      \"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=2&fullData=true\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setVaccinationInfo(data[0]);\n      });\n\n      getCountriesData();\n      getCountriesVaccinationData();\n      getMapCountries();\n  }, [casesType]);\n\n\n  const getCountriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapDataCountries(data);\n        setCountries(countries);\n      });\n  };\n\n  const getCountriesVaccinationData = async () => {\n    await fetch(\n      \"https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1&fullData=true\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setMapDataCountriesVaccination(data);\n      });\n  };\n\n  const getMapCountries = async () => {\n    if (mapDataCountries && mapDataCountriesVaccination) {\n      let mapData = [];\n      for (var i = 0; i < mapDataCountries?.length; i++) {\n        for (var j = 0; j < mapDataCountriesVaccination?.length; j++) {\n          if (\n            mapDataCountries[i].country ===\n            mapDataCountriesVaccination[j].country\n          ) {\n            let dataForMap = {\n              country: mapDataCountries[i].country,\n              countryInfo: mapDataCountries[i].countryInfo,\n              cases: mapDataCountries[i].cases,\n              recovered: mapDataCountries[i].recovered,\n              deaths: mapDataCountries[i].deaths,\n              vaccinated: mapDataCountriesVaccination[j].timeline[0].total,\n            };\n\n            mapData.push(dataForMap);\n            break;\n          }\n        }\n      }\n\n      setMapCountries(mapData);\n    }\n  };\n\n  // chnaging countries\n  const onCountryChange = async (event) => {\n    console.log(mapCountries);\n    setLoading(true);\n    const countryCode = event.target.value;\n\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setLoading(false);\n\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(3);\n      });\n\n    const vaccineUrl =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=2&fullData=true\"\n        : `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${countryCode}?lastdays=2&fullData=true`;\n\n    await fetch(vaccineUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        if (countryCode === \"worldwide\") {\n          setVaccinationInfo(data[0]);\n        } else {\n          setVaccinationInfo(data.timeline[0]);\n        }\n      });\n\n    console.log(countryInfo);\n    console.log(vaccinationInfo);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1> COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\"> Worldwide </MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <Infobox\n            isRed\n            active={casesType === \"cases\"}\n            className=\"infobox__cases\"\n            onClick={(e) => {\n              setCasesType(\"cases\");\n            }}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n            isloading={isLoading}\n          />\n          <Infobox\n            isGreen\n            active={casesType === \"recovered\"}\n            className=\"infobox__recovered\"\n            onClick={(e) => {\n              setCasesType(\"recovered\");\n            }}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n            isloading={isLoading}\n          />\n          <Infobox\n            isGrey\n            active={casesType === \"deaths\"}\n            className=\"infobox__deaths\"\n            onClick={(e) => {\n              setCasesType(\"deaths\");\n            }}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n            isloading={isLoading}\n          />\n          <Infobox\n            isBlue\n            active={casesType === \"vaccinated\"}\n            className=\"infobox__cases\"\n            onClick={(e) => {\n              setCasesType(\"vaccinated\");\n            }}\n            title=\"Vaccination Stats\"\n            cases={prettyPrintStat(vaccinationInfo.daily)}\n            total={prettyPrintStat(vaccinationInfo.total)}\n            isloading={isLoading}\n          />\n        </div>\n\n          <Map\n            casesType={casesType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country </h3>\n          <Table countries={tableData} />\n\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType} </h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}